rm(list=ls())
set.seed(999123)
x = c(1,1.5,2,3,4,4.5,5,5.5,6,6.5,7,8,9,10,11,12,13,14,15)
y = c(21.9,27.8,42.8,48.0,52.5,52.0,53.1,46.1,42.0,39.9,38.1,34.0,33.8,30.0,26.1,24.0,20.0,11.1,6.3)
Nboot=1000
temp=NULL
n=length(x)
data=cbind(x,y)
for (i in 1:Nboot){
ind=sample(1:19,19,replace=T)
mydata=data.frame(data[ind,])
lm_out=lm(y~x,data=mydata) #carry out the regression on a bootstrap sample
estslope=coef(lm_out)[2]#   extract the slope
temp=c(temp,estslope) #   accumulate the slopes in temp
}
hist(temp,main = "Histogram of the bootstrap distribution of the estimated Slope",
xlab = "estimated slope")
rm(list=ls())
x = c(1,1.5,2,3,4,4.5,5,5.5,6,6.5,7,8,9,10,11,12,13,14,15)
y = c(6.3,11.1,20,24,26.1,30,33.8,34.0,38.1,39.9,42,46.1,53.1,52,52.5,48,42.8,27.8,21.9)
n=length(y)
plot(x,y,xlab="hardwood %",ylab="tensile strength")
library(boot)
data=data.frame(x=x,y=y)
b1=function(data,index){
x=data$x[index]
y=data$y[index]
lmout=lm(y~x)
b1=coef(lmout)[2]
return(b1)}
data=data.frame(x=x,y=y)
temp2=NULL
for (Nboot in c(10,100,1000)){
temp=NULL
for (i in 1:10) {
bout=boot(data,b1,R=Nboot)
temp=c(temp,sd(bout$t)) #accumulate the standard errors
}
temp2=c(temp2,temp)
}
M=matrix(temp2,byrow=T,ncol=10)
print(M)
# define the extractor function:
#myext <- function(data,index){
# choose what you want to return, for example an estimated regression parameter
# e.g. this might be the estimate of the slope of a linear regression model
# return (this)
#}
# call boot
# bout <- boot(data,myext,..)
# retrieve the bootstrap distribution:
# bout$t
# now you can work on this bootstrap distribution and apply var or sd to e.g. find
# the variance or standard error of the bootstrap distribution
# additional information and examples may be found in the last class lecture
library(boot)
data=data.frame(x=x,y=y)
b1=function(data,index){
x=data$x[index]
y=data$y[index]
lmout=lm(y~x)
b1=coef(lmout)[2]
return(b1)}
data=data.frame(x=x,y=y)
temp2=NULL
for (Nboot in c(10,100,1000)){
temp=NULL
for (i in 1:10) {
bout=boot(data,b1,R=Nboot)
temp=c(temp,sd(bout$t)) #accumulate the standard errors
}
temp2=c(temp2,temp)
}
M=matrix(temp2,byrow=T,ncol=10)
print(M)
Nboot=c(rep(10,10),rep(100,10),rep(1000,10))
boxplot(temp2~Nboot,main="Standard Error Estimates")
# define the extractor function:
#myext <- function(data,index){
# choose what you want to return, for example an estimated regression parameter
# e.g. this might be the estimate of the slope of a linear regression model
# return (this)
#}
# call boot
# bout <- boot(data,myext,..)
# retrieve the bootstrap distribution:
# bout$t
# now you can work on this bootstrap distribution and apply var or sd to e.g. find
# the variance or standard error of the bootstrap distribution
# additional information and examples may be found in the last class lecture
#boot:used to estimate the std error of any statistic
library(boot)
data=data.frame(x=x,y=y)
bootdata1=function(data,index){
x=data$x[index]
y=data$y[index]
lmout=lm(y~x)
bootdata1=coef(lmout)[2]
return(bootdata1)
}
temp1=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=10)
temp1=c(temp1,sd(b_out$t))
}
var(temp1)
temp2=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=100)
temp2=c(temp2,sd(b_out$t))
}
var(temp2)
temp3=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=1000)
temp3=c(temp3,sd(b_out$t))
}
var(temp3)
# define the extractor function:
#myext <- function(data,index){
# choose what you want to return, for example an estimated regression parameter
# e.g. this might be the estimate of the slope of a linear regression model
# return (this)
#}
# call boot
# bout <- boot(data,myext,..)
# retrieve the bootstrap distribution:
# bout$t
# now you can work on this bootstrap distribution and apply var or sd to e.g. find
# the variance or standard error of the bootstrap distribution
# additional information and examples may be found in the last class lecture
#boot:used to estimate the std error of any statistic
library(boot)
data=data.frame(x=x,y=y)
bootdata=function(data, ind){
x=data$x[ind]
y=data$y[ind]
lm_out=lm(y~x)
bootdata=coef(lm_out)[2]
return (bootdata)
}
#boot(data,bootdata,R=1000)
temp1=NULL
for(i in 1:10){
b_out=boot(data,bootdata,R=10)
temp1=c(temp1,sd(b_out$t))
}
var(temp1)
temp2=NULL
for(i in 1:10){
b_out=boot(data,bootdata,R=100)
temp2=c(temp2,sd(b_out$t))
}
var(temp2)
temp3=NULL
for(i in 1:10){
b_out=boot(data,bootdata,R=1000)
temp3=c(temp3,sd(b_out$t))
}
var(temp3)
#boot:used to estimate the std error of any statistic
library(boot)
data=data.frame(x=x,y=y)
bootdata1=function(data,index){
x=data$x[index]
y=data$y[index]
lmout=lm(y~x)
bootdata1=coef(lmout)[2]
return(bootdata1)
}
temp1=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=10)
temp1=c(temp1,sd(b_out$t))
}
var(temp1)
temp2=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=100)
temp2=c(temp2,sd(b_out$t))
}
var(temp2)
temp3=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=1000)
temp3=c(temp3,sd(b_out$t))
}
var(temp3)
boxplot(temp1,temp2,temp3,main="Standard Error Estimates")
# define the extractor function:
#myext <- function(data,index){
# choose what you want to return, for example an estimated regression parameter
# e.g. this might be the estimate of the slope of a linear regression model
# return (this)
#}
# call boot
# bout <- boot(data,myext,..)
# retrieve the bootstrap distribution:
# bout$t
# now you can work on this bootstrap distribution and apply var or sd to e.g. find
# the variance or standard error of the bootstrap distribution
# additional information and examples may be found in the last class lecture
#boot:used to estimate the std error of any statistic
library(boot)
data=data.frame(x=x,y=y)
bootdata1=function(data,index){
x=data$x[index]
y=data$y[index]
lmout=lm(y~x)
bootdata1=coef(lmout)[2]
return(bootdata1)
}
temp1=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=10)
temp1=c(temp1,sd(b_out$t))
}
var(temp1)
temp2=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=100)
temp2=c(temp2,sd(b_out$t))
}
var(temp2)
temp3=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=1000)
temp3=c(temp3,sd(b_out$t))
}
var(temp3)
Nboot=c(rep(10,10),rep(100,10),rep(1000,10))
boxplot(temp1,temp2,temp3,main="Standard Error Estimates")
# define the extractor function:
#myext <- function(data,index){
# choose what you want to return, for example an estimated regression parameter
# e.g. this might be the estimate of the slope of a linear regression model
# return (this)
#}
# call boot
# bout <- boot(data,myext,..)
# retrieve the bootstrap distribution:
# bout$t
# now you can work on this bootstrap distribution and apply var or sd to e.g. find
# the variance or standard error of the bootstrap distribution
# additional information and examples may be found in the last class lecture
#boot:used to estimate the std error of any statistic
library(boot)
data=data.frame(x=x,y=y)
bootdata1=function(data,index){
x=data$x[index]
y=data$y[index]
lmout=lm(y~x)
bootdata1=coef(lmout)[2]
return(bootdata1)
}
temp1=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=10)
temp1=c(temp1,sd(b_out$t))
}
var(temp1)
temp2=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=100)
temp2=c(temp2,sd(b_out$t))
}
var(temp2)
temp3=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=1000)
temp3=c(temp3,sd(b_out$t))
}
var(temp3)
boxplot(temp1,temp2,temp3,main="Standard Error Estimates",xlab="10   100   1000")
# define the extractor function:
#myext <- function(data,index){
# choose what you want to return, for example an estimated regression parameter
# e.g. this might be the estimate of the slope of a linear regression model
# return (this)
#}
# call boot
# bout <- boot(data,myext,..)
# retrieve the bootstrap distribution:
# bout$t
# now you can work on this bootstrap distribution and apply var or sd to e.g. find
# the variance or standard error of the bootstrap distribution
# additional information and examples may be found in the last class lecture
#boot:used to estimate the std error of any statistic
library(boot)
data=data.frame(x=x,y=y)
bootdata1=function(data,index){
x=data$x[index]
y=data$y[index]
lmout=lm(y~x)
bootdata1=coef(lmout)[2]
return(bootdata1)
}
temp1=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=10)
temp1=c(temp1,sd(b_out$t))
}
var(temp1)
temp2=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=100)
temp2=c(temp2,sd(b_out$t))
}
var(temp2)
temp3=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=1000)
temp3=c(temp3,sd(b_out$t))
}
var(temp3)
boxplot(temp1,temp2,temp3,main="Standard Error Estimates",xlab="10          100                  1000")
# define the extractor function:
#myext <- function(data,index){
# choose what you want to return, for example an estimated regression parameter
# e.g. this might be the estimate of the slope of a linear regression model
# return (this)
#}
# call boot
# bout <- boot(data,myext,..)
# retrieve the bootstrap distribution:
# bout$t
# now you can work on this bootstrap distribution and apply var or sd to e.g. find
# the variance or standard error of the bootstrap distribution
# additional information and examples may be found in the last class lecture
#boot:used to estimate the std error of any statistic
library(boot)
data=data.frame(x=x,y=y)
bootdata1=function(data,index){
x=data$x[index]
y=data$y[index]
lmout=lm(y~x)
bootdata1=coef(lmout)[2]
return(bootdata1)
}
temp1=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=10)
temp1=c(temp1,sd(b_out$t))
}
var(temp1)
temp2=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=100)
temp2=c(temp2,sd(b_out$t))
}
var(temp2)
temp3=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=1000)
temp3=c(temp3,sd(b_out$t))
}
var(temp3)
boxplot(temp1,temp2,temp3,main="Standard Error Estimates",xlab="10      100                  1000")
# define the extractor function:
#myext <- function(data,index){
# choose what you want to return, for example an estimated regression parameter
# e.g. this might be the estimate of the slope of a linear regression model
# return (this)
#}
# call boot
# bout <- boot(data,myext,..)
# retrieve the bootstrap distribution:
# bout$t
# now you can work on this bootstrap distribution and apply var or sd to e.g. find
# the variance or standard error of the bootstrap distribution
# additional information and examples may be found in the last class lecture
#boot:used to estimate the std error of any statistic
library(boot)
data=data.frame(x=x,y=y)
bootdata1=function(data,index){
x=data$x[index]
y=data$y[index]
lmout=lm(y~x)
bootdata1=coef(lmout)[2]
return(bootdata1)
}
temp1=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=10)
temp1=c(temp1,sd(b_out$t))
}
var(temp1)
temp2=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=100)
temp2=c(temp2,sd(b_out$t))
}
var(temp2)
temp3=NULL
for(i in 1:10){
b_out=boot(data,bootdata1,R=1000)
temp3=c(temp3,sd(b_out$t))
}
var(temp3)
boxplot(temp1,temp2,temp3,main="Standard Error Estimates",xlab="10                   100                                  1000")
# define the extractor function:
#myext <- function(data,index){
# choose what you want to return, for example an estimated regression parameter
# e.g. this might be the estimate of the slope of a linear regression model
# return (this)
#}
# call boot
# bout <- boot(data,myext,..)
# retrieve the bootstrap distribution:
# bout$t
# now you can work on this bootstrap distribution and apply var or sd to e.g. find
# the variance or standard error of the bootstrap distribution
# additional information and examples may be found in the last class lecture
