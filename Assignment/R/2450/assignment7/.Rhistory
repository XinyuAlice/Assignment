library(Hmisc)
library("caret")
library("rpart")
library("tree")
library("e1071")
library(ggplot2)
library(randomForest)
library(Hmisc)
if(!require(Hmisc)) install.packages("Hmisc",repos = "http://cran.us.r-project.org")
library("caret")
library("rpart")
library("tree")
library("e1071")
library(ggplot2)
library(randomForest)
library(Hmisc)
if(!require(Hmisc)) install.packages("Hmisc",repos = "http://cran.us.r-project.org")
library("caret")
library("rpart")
library("tree")
library("e1071")
library(ggplot2)
library(randomForest)
#library(Hmisc)
if(!require(Hmisc)) install.packages("Hmisc",repos = "http://cran.us.r-project.org")
library("caret")
library("rpart")
library("tree")
library("e1071")
library(ggplot2)
library(randomForest)
#library(Hmisc)
if(!require(Hmisc)) install.packages("Hmisc",repos = "http://cran.us.r-project.org")
library("caret")
library("rpart")
library("tree")
library("e1071")
library(ggplot2)
library(randomForest)
mytrain = read.csv("https://mathstat.dal.ca/~fullsack/DATA/titanictrain.csv")
#mytrain = read.csv("https://mathstat.dal.ca/~fullsack/DATA/titanictest.csv')
mytitanic = rbind(mytest0,mytrain0)
#library(Hmisc)
#if(!require(Hmisc)) install.packages("Hmisc",repos = "http://cran.us.r-project.org")
install.packages("Hmisc")
library("caret")
library("rpart")
library("tree")
library("e1071")
library(ggplot2)
library(randomForest)
install.packages("Hmisc")
#library(Hmisc)
#if(!require(Hmisc)) install.packages("Hmisc",repos = "http://cran.us.r-project.org")
install.packages("Hmisc")
library("caret")
library("rpart")
library("tree")
library("e1071")
library(ggplot2)
library(randomForest)
#library(Hmisc)
#if(!require(Hmisc)) install.packages("Hmisc",repos = "http://cran.us.r-project.org")
install.packages("Hmisc")
library("caret")
library("rpart")
library("tree")
library("e1071")
library(ggplot2)
library(randomForest)
#library(Hmisc)
#if(!require(Hmisc)) install.packages("Hmisc",repos = "http://cran.us.r-project.org")
install.packages("Hmisc")
library("caret")
library("rpart")
library("tree")
library("e1071")
library(ggplot2)
library(randomForest)
#library(Hmisc)
#if(!require(Hmisc)) install.packages("Hmisc",repos = "http://cran.us.r-project.org")
install.packages("Hmisc")
library("caret")
library("rpart")
library("tree")
library("e1071")
library(ggplot2)
library(randomForest)
#library(Hmisc)
if(!require(Hmisc)) install.packages("Hmisc",repos = "http://cran.us.r-project.org")
#install.packages("Hmisc")
library("caret")
library("rpart")
library("tree")
library("e1071")
library(ggplot2)
library(randomForest)
mytrain = read.csv("https://mathstat.dal.ca/~fullsack/DATA/titanictrain.csv")
#mytrain = read.csv("https://mathstat.dal.ca/~fullsack/DATA/titanictest.csv')
mytitanic = rbind(mytest0,mytrain0)
#library(Hmisc)
install.packages("Hmisc")
library("caret")
library("rpart")
library("tree")
library("e1071")
library(ggplot2)
library(randomForest)
mytrain0 = read.csv("https://mathstat.dal.ca/~fullsack/DATA/titanictrain.csv")
mytest0 = read.csv("https://mathstat.dal.ca/~fullsack/DATA/titanictest.csv")
mytitanic = rbind(mytest0,mytrain0)
nrec=nrow(mytitanic)
set.seed(2255)
# shuffle
#
# Create 5 folds of equal size
# myfolds ...
myfolds<-cut(seq(1,nrow(mytitanic)),breaks=5,labels=FALSE)
set.seed(2255)
# shuffle
#
# Create 5 folds of equal size
# myfolds ...
myData<-myData[sample(nrow(myData)),]
set.seed(2255)
# shuffle
#
# Create 5 folds of equal size
# myfolds ...
myData<-myData[sample(nrow(mytitanic)),]
set.seed(2255)
# shuffle
#
# Create 5 folds of equal size
# myfolds ...
myData<-mytitanic[sample(nrow(mytitanic)),]
myfolds<-cut(seq(1,nrow(myData)),breaks=5,labels=FALSE)
i=3 # fold number to use
for(i in 1:3){ # loop over each of 3
# recover the indexes of fold i  and define the indexes of the test set
testIndexes <- which(myfolds==i,arr.ind=TRUE)
# define yout test  for this fold
testData <- myData[testIndexes, ]
# define your training set for this fold as the complement
trainData <- myData[-testIndexes, ]
}
set.seed(44182)
library(ISLR)
library(randomForest)
attach(Carseats)
n=nrow(Carseats)
indices=sample(1:n,n/2,replace=F)
cstrain=Carseats[indices,]
cstest=Carseats[-indices,]
library(tree)
train.tree=tree(Sales~.,data=cstrain)
plot(train.tree)
text(train.tree)
testpredict=predict(train.tree, newdata = cstest)
testMSE = mean((cstest$Sales-testpredict)^2)
testMSE
set.seed(77191)
library(ISLR)
library(randomForest)
attach(Carseats)
n=nrow(Carseats)
indices=sample(1:n,n/2,replace=F)
cstrain=Carseats[indices,]
cstest=Carseats[-indices,]
set.seed(77191)
library(ISLR)
library(randomForest)
attach(Carseats)
n=nrow(Carseats)
indices=sample(1:n,n/2,replace=F)
cstrain=Carseats[indices,]
cstest=Carseats[-indices,]
library(tree)
train.tree=tree(Sales~.,data=cstrain)
plot(train.tree)
text(train.tree)
testpredict=predict(train.tree, newdata = cstest)
testMSE = mean((cstest$Sales-testpredict)^2)
testMSE
salesCV = cv.tree(train.tree)
bestSize = salesCV$size[salesCV$dev == min(salesCV$dev)]
tree.pruned = prune.tree(train.tree, best = bestSize)
prunepredict = predict(tree.pruned, newdata = cstest)
pruneMSE = mean((cstest$Sales-prunepredict)^2)
pruneMSE
#bagging
sales.rf = randomForest(Sales~., data = cstrain, mtry = 10, importance = T)
importance(sales.rf)
trainpredict4d = predict(sales.rf, newdata = cstrain)
testpredict4d = predict(sales.rf, newdata = cstest)
testMSE4d=mean((cstrain$Sales-trainpredict4d)^2)
testMSE4d
sales.rf = randomForest(Sales~., data = cstrain, mtry = 2, importance = T)
importance(sales.rf)
trainpredict4e1 = predict(sales.rf, newdata = cstrain)
testpredict4e1 = predict(sales.rf, newdata = cstest)
testMSE4e1=mean((cstrain$Sales-trainpredict4e1)^2)
testMSE4e1
sales.rf = randomForest(Sales~., data = cstrain, mtry = 9, importance = T)
importance(sales.rf)
trainpredict4e2 = predict(sales.rf, newdata = cstrain)
testpredict4e2 = predict(sales.rf, newdata = cstest)
testMSE4e2=mean((cstrain$Sales-trainpredict4e2)^2)
testMSE4e2
set.seed(2255)
# shuffle
#
# Create 5 folds of equal size
# myfolds ...
myData<-mytitanic[sample(nrec),]
mytrain0 = read.csv("https://mathstat.dal.ca/~fullsack/DATA/titanictrain.csv")
mytest0 = read.csv("https://mathstat.dal.ca/~fullsack/DATA/titanictest.csv")
mytitanic = rbind(mytest0,mytrain0)
nrec=nrow(mytitanic)
set.seed(2255)
# shuffle
#
# Create 5 folds of equal size
# myfolds ...
myData<-mytitanic[sample(nrec),]
myfolds<-cut(seq(1,nrow(myData)),breaks=5,labels=FALSE)
i=3 # fold number to use
for(i in 1:3){ # loop over each of 3
# recover the indexes of fold i  and define the indexes of the test set
testIndexes <- which(myfolds==i,arr.ind=TRUE)
# define yout test  for this fold
mytest<- myData[testIndexes, ]
# define your training set for this fold as the complement
mytrain <- myData[-testIndexes, ]
}
# Fitting Random Forest Classification to the training set 'mytrain'
set.seed(523) # or use the recommended seed
trainindex=sample(1:nrec,nrec/2,replace=F)
mytrain=mydata[trainindex,] # training set
# Fitting Random Forest Classification to the training set 'mytrain'
set.seed(523) # or use the recommended seed
trainindex=sample(1:nrec,nrec/2,replace=F)
mytrain=myData[trainindex,] # training set
mytest=myData[-trainindex,] # testing set =  complementary subset of mydata
set.seed(44182)
library(ISLR)
library(randomForest)
attach(Carseats)
n=nrow(Carseats)
indices=sample(1:n,n/2,replace=F)
cstrain=Carseats[indices,]
cstest=Carseats[-indices,]
set.seed(44182)
library(ISLR)
library(randomForest)
attach(Carseats)
n=nrow(Carseats)
indices=sample(1:n,n/2,replace=F)
cstrain=Carseats[indices,]
cstest=Carseats[-indices,]
set.seed(44182)
library(ISLR)
library(randomForest)
attach(Carseats)
n=nrow(Carseats)
indices=sample(1:n,n/2,replace=F)
cstrain=Carseats[indices,]
cstest=Carseats[-indices,]
set.seed(77191)
library(ISLR)
library(randomForest)
attach(Carseats)
n=nrow(Carseats)
indices=sample(1:n,n/2,replace=F)
cstrain=Carseats[indices,]
cstest=Carseats[-indices,]
library(tree)
train.tree=tree(Sales~.,data=cstrain)
plot(train.tree)
text(train.tree)
testpredict=predict(train.tree, newdata = cstest)
testMSE = mean((cstest$Sales-testpredict)^2)
testMSE
mytrain = read.csv("https://mathstat.dal.ca/~fullsack/DATA/titanictrain.csv")
mytest = read.csv("https://mathstat.dal.ca/~fullsack/DATA/titanictest.csv")
mytitanic = rbind(mytest,mytrain)
nrec=nrow(mytitanic)
set.seed(2255)
# shuffle
#
# Create 5 folds of equal size
# myfolds ...
myData<-mytitanic[sample(nrow(mytitanic)),]
myfolds<-cut(seq(1,nrow(mytitanic)),breaks=5,labels=FALSE)
i=3 # fold number to use
mytest=NULL
mytrain=NULL
for(j in 1:10){ # loop over each of 3
# recover the indexes of fold i  and define the indexes of the test set
testIndexes <- which(myfolds==i,arr.ind=TRUE)
# define yout test  for this fold
mytest<- mytitanic[testIndexes, ]
# define your training set for this fold as the complement
mytrain <- mytitanic[-testIndexes, ]
}
if(!require(Hmisc)) install.packages("Hmisc",repos = "http://cran.us.r-project.org")
#library(Hmisc)
library("caret")
library("rpart")
library("tree")
library("e1071")
library(ggplot2)
library(randomForest)
mytrain = read.csv("https://mathstat.dal.ca/~fullsack/DATA/titanictrain.csv")
mytest = read.csv("https://mathstat.dal.ca/~fullsack/DATA/titanictest.csv")
mytitanic = rbind(mytest,mytrain)
nrec=nrow(mytitanic)
set.seed(2255)
# shuffle
#
# Create 5 folds of equal size
# myfolds ...
myData<-mytitanic[sample(nrow(mytitanic)),]
myfolds<-cut(seq(1,nrow(mytitanic)),breaks=5,labels=FALSE)
i=3 # fold number to use
mytest=NULL
mytrain=NULL
for(j in 1:10){ # loop over each of 10
# recover the indexes of fold i  and define the indexes of the test set
testIndexes <- which(myfolds==i,arr.ind=TRUE)
# define yout test  for this fold
mytest<- mytitanic[testIndexes, ]
# define your training set for this fold as the complement
mytrain <- mytitanic[-testIndexes, ]
}
# Fitting Random Forest Classification to the training set 'mytrain'
set.seed(523) # or use the recommended seed
trainindex=sample(1:nrec,nrec/2,replace=F)
mytrain=myData[trainindex,] # training set
mytest=myData[-trainindex,] # testing set =  complementary subset of mydata
rf<-randomForest(as.factor(Survived)~.,data=mytrain,importance=T)
plot(rf)
#
# Predicting survival on mytest
randomf.pred <- predict(randomf,newdata=mytest[,-which(names(mytest)=="Survived")])
# Fitting Random Forest Classification to the training set 'mytrain'
set.seed(523) # or use the recommended seed
randomf<-randomForest(as.factor(Survived)~.,data=mytrain,importance=T)
plot(randomf)
#
# Predicting survival on mytest
randomf.pred <- predict(randomf,newdata=mytest[,-which(names(mytest)=="Survived")])
table(randomf.pred,mytest$Survived)
# Predicting survival on mytest
randomf.pred <- predict(randomf,newdata=mytest[,-which(names(mytest)=="Survived")])
table(randomf.pred,mytest$Survived)
mean(mytest$Survived==randomf.pred)
# Predicting survival on mytest
randomf.pred <- predict(randomf,newdata=mytest[,-which(names(mytest)=="Survived")])
table(randomf.pred,mytest$Survived)
mean(mytest$Survived!=randomf.pred)
mean(mytest$Survived==randomf.pred)
importance(randomf)
varImpPlot(randomf)
table(mytest$Title,mytest$Survived)
table(mytest$Sex,mytest$Survived)
median((mytest$Fare))
table(mytest$Fare < 15,mytest$Survived)
rm(mytrain,mytest)
#mytrain
set.seed(2255)
# shuffle
#
# Create 5 folds of equal size
# myfolds ...
myData<-mytitanic[sample(nrow(mytitanic)),]
mytrain = read.csv("https://mathstat.dal.ca/~fullsack/DATA/titanictrain.csv")
mytest = read.csv("https://mathstat.dal.ca/~fullsack/DATA/titanictest.csv")
mytitanic = rbind(mytest,mytrain)
nrec=nrow(mytitanic)
set.seed(2255)
# shuffle
#
# Create 5 folds of equal size
# myfolds ...
myData<-mytitanic[sample(nrow(mytitanic)),]
myfolds<-cut(seq(1,nrow(mytitanic)),breaks=5,labels=FALSE)
i=3 # fold number to use
mytest=NULL
mytrain=NULL
for(i in 1:3){ # loop over each of 3
# recover the indexes of fold i  and define the indexes of the test set
testIndexes <- which(myfolds==i,arr.ind=TRUE)
# define yout test  for this fold
mytest<- mytitanic[testIndexes, ]
# define your training set for this fold as the complement
mytrain <- mytitanic[-testIndexes, ]
}
# Fitting Random Forest Classification to the training set 'mytrain'
set.seed(523) # or use the recommended seed
randomf<-randomForest(as.factor(Survived)~.,data=mytrain,importance=T)
if(!require(Hmisc)) install.packages("Hmisc",repos = "http://cran.us.r-project.org")
#library(Hmisc)
library("caret")
library("rpart")
library("tree")
library("e1071")
library(ggplot2)
library(randomForest)
# Fitting Random Forest Classification to the training set 'mytrain'
set.seed(523) # or use the recommended seed
randomf<-randomForest(as.factor(Survived)~.,data=mytrain,importance=T)
plot(randomf)
#
# Predicting survival on mytest
randomf.pred <- predict(randomf,newdata=mytest[,-which(names(mytest)=="Survived")])
table(randomf.pred,mytest$Survived)
mean(mytest$Survived!=randomf.pred)
mean(mytest$Survived==randomf.pred)
i=3 # fold number to use
mytest=NULL
mytrain=NULL
for(j in 1:3){ # loop over each of 3
# recover the indexes of fold i  and define the indexes of the test set
testIndexes <- which(myfolds==i,arr.ind=TRUE)
# define yout test  for this fold
mytest<- mytitanic[testIndexes, ]
# define your training set for this fold as the complement
mytrain <- mytitanic[-testIndexes, ]
}
# Fitting Random Forest Classification to the training set 'mytrain'
set.seed(523) # or use the recommended seed
randomf<-randomForest(as.factor(Survived)~.,data=mytrain,importance=T)
plot(randomf)
#
# Predicting survival on mytest
randomf.pred <- predict(randomf,newdata=mytest[,-which(names(mytest)=="Survived")])
table(randomf.pred,mytest$Survived)
mean(mytest$Survived!=randomf.pred)
mean(mytest$Survived==randomf.pred)
# Predicting survival on mytest
randomf.pred <- predict(randomf,newdata=mytest[,-which(names(mytest)=="Survived")])
table(randomf.pred,mytest$Survived)
mean(mytest$Survived!=randomf.pred)
mean(mytest$Survived==randomf.pred)
median((mytest$Fare))
table(mytest$Fare < 15,mytest$Survived)
table(mytest$Sex,mytest$Survived)
table(mytest$Title,mytest$Survived)
varImpPlot(randomf)
importance(randomf)
# Predicting survival on mytest
randomf.pred <- predict(randomf,newdata=mytest[,-which(names(mytest)=="Survived")])
table(randomf.pred,mytest$Survived)
mean(mytest$Survived!=randomf.pred)
mean(mytest$Survived==randomf.pred)
rm(mytrain,mytest)
#mytrain
table(mytest$Fare < 15,mytest$Survived)
median((mytest$Fare))
importance(randomf)
varImpPlot(randomf)
table(mytest$Title,mytest$Survived)
mytrain = read.csv("https://mathstat.dal.ca/~fullsack/DATA/titanictrain.csv")
mytest = read.csv("https://mathstat.dal.ca/~fullsack/DATA/titanictest.csv")
mytitanic = rbind(mytest,mytrain)
nrec=nrow(mytitanic)
set.seed(2255)
# shuffle
#
# Create 5 folds of equal size
# myfolds ...
myData<-mytitanic[sample(nrow(mytitanic)),]
myfolds<-cut(seq(1,nrow(mytitanic)),breaks=5,labels=FALSE)
i=3 # fold number to use
mytest=NULL
mytrain=NULL
for(j in 1:3){ # loop over each of 3 folds
# recover the indexes of fold i  and define the indexes of the test set
testIndexes <- which(myfolds==i,arr.ind=TRUE)
# define yout test  for this fold
mytest<- mytitanic[testIndexes, ]
# define your training set for this fold as the complement
mytrain <- mytitanic[-testIndexes, ]
}
# Fitting Random Forest Classification to the training set 'mytrain'
set.seed(523) # or use the recommended seed
randomf<-randomForest(as.factor(Survived)~.,data=mytrain,importance=T)
plot(randomf)
#
# Predicting survival on mytest
randomf.pred <- predict(randomf,newdata=mytest[,-which(names(mytest)=="Survived")])
table(randomf.pred,mytest$Survived)
mean(mytest$Survived!=randomf.pred)
mean(mytest$Survived==randomf.pred)
importance(randomf)
varImpPlot(randomf)
table(mytest$Title,mytest$Survived)
table(mytest$Sex,mytest$Survived)
median((mytest$Fare))
table(mytest$Fare < 15,mytest$Survived)
rm(mytrain,mytest)
#mytrain
